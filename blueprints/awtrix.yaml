blueprint:
  name: Awtrix 
  description: Awtrix Light
  author: Chris Colden
  domain: automation
  input:
    trigger_entity:
      name: Trigger Entity
      description: >
        The entity which will trigger the automation.
      default: []
      selector:
        entity:
      
    trigger_event_type:
      name: Trigger Event Type
      description: >-
        The event type which should trigger the automation.
      default: ""
      selector:
        text:
    
    awtrix_device:
      name: AWTRIX Device
      description: Select the AWTRIX 3
      selector:
        device:
          integration: mqtt
          manufacturer: Blueforcer
          model: AWTRIX 3
          multiple: true
          
    awtrix_appname:
      name: Awtrix Application name
      description: >-
        This is the app name listed in the MQTT topic - it should be unique
      default: "mycustomapp"
      selector:
        text:

    awtrix_retain:
      name: MQTT Retain
      description: MQTT Retain, be cerful!
      selector:
        boolean:
      default: false

    awtrix_text_color:
      name: Text Color
      description: Select the Text Color
      selector:
        color_rgb:
      default: [255, 255, 255]

    awtrix_background_color:
      name: Background Color
      description: Sets a background color
      selector:
        color_rgb:
      default: [0, 0, 0]

    awtrix_rainbow:
      name: Rainbow Effect
      description: Fades each letter in the text differently through the entire RGB spectrum.
      selector:
        boolean:
      default: false

    awtrix_push_icon:
      name: Push Icon
      description: Icon behavior
      selector:
        select:
          options:
            - label: "Icon doesn't move"
              value: "0"
            - label: "Icon moves with text and will not appear again"
              value: "1"
            - label: "Icon moves with text but appears again when the text starts"
              value: "2"
          mode: dropdown
      default: "0"

    awtrix_text_case:
      name: Text Case
      description: Text Case
      selector:
        select:
          options:
            - label: "global setting"
              value: "0"
            - label: "forces uppercase"
              value: "1"
            - label: "shows as it sent"
              value: "2"
          mode: dropdown
      default: "0"

    awtrix_position:
      name: Position
      description: Position in the Awtrix cycle
      default: 0
      selector:
        number:
          min: 0
          max: 20

    awtrix_repeat:
      name: Repeat
      description: Sets how many times the text should be scrolled through the matrix before the app ends.	
      default: 1
      selector:
        number:
          min: 1
          max: 100

    awtrix_text_offset:
      name: Text Offset
      description: Sets an offset for the x position of a starting text.
      default: 0
      selector:
        number:
          min: 0
          max: 34
    
    awtrix_duration:
      name: Duration (in seconds)
      description: Sets how long the app should be displayed. 0 is global app time.
      default: "0"
    
    awtrix_text:
      name: Text
      description: Text to Publish
      selector:
        template: 
    
    awtrix_icon:
      name: icon
      description: Icon Name
      selector:
        template: 

variables:
  trigger_entity: !input trigger_entity
  trigger_event_type: !input trigger_event_type
  device_ids: !input awtrix_device
  devices: >-
    {% macro get_device(device_id) %}
      {{ states((device_entities(device_id) | select('search','device_topic') | list)[0] | default('unknown')) }}
    {% endmacro %}
    {% set ns = namespace(devices=[]) %}
    {% for device_id in device_ids %}
      {% set device=get_device(device_id)|replace(' ','')|replace('\n','') %}
      {% set ns.devices = ns.devices + [ device ] %}
    {% endfor %}
    {{ ns.devices | reject('match','unavailable|unknown') | list }}
  awtrix_appname: !input awtrix_appname
  awtrix_retain_input: !input awtrix_retain
  awtrix_retain: >
    {{ (awtrix_retain_input | string).lower() }}
  awtrix_rainbow_input: !input awtrix_rainbow
  awtrix_rainbow: >
    {{ (awtrix_rainbow_input | string).lower() }}
  awtrix_push_icon: !input awtrix_push_icon
  awtrix_icon: !input awtrix_icon
  awtrix_text_case: !input awtrix_text_case
  awtrix_text: !input awtrix_text
  awtrix_repeat: !input awtrix_repeat
  awtrix_duration: !input awtrix_duration
  awtrix_pos: !input awtrix_position
  awtrix_text_offset: !input awtrix_text_offset
  awtrix_text_color_input: !input awtrix_text_color
  awtrix_text_color: >
    {{ "#%02x%02x%02x" | format(awtrix_text_color_input[0], awtrix_text_color_input[1], awtrix_text_color_input[2]) }}
  awtrix_background_color_input: !input awtrix_background_color
  awtrix_background_color: >
    {{ "#%02x%02x%02x" | format(awtrix_background_color_input[0], awtrix_background_color_input[1], awtrix_background_color_input[2]) }}

triggers:
  - trigger: state
    id: "t0"
    entity_id: !input trigger_entity
    from: "off"
    to: "on"
  - trigger: event
    id: "t1"
    event_type: !input trigger_event_type
    
sequence:
  - repeat:
      for_each: "{{ devices }}"
      sequence:
        - choose:
          - conditions:
            - condition: template
              value_template: '{{ awtrix_appname == "" }}'
            sequence:
              - service: mqtt.publish
                data:
                  qos: 0
                  retain: "{{awtrix_retain}}"
                  topic: "{{ repeat.item }}/notify"
                  payload: >
                    {
                      "text": "{{awtrix_text}}",
                      "textCase": {{awtrix_text_case}},
                      "textOffset": {{awtrix_text_offset}},
                      "color": "{{awtrix_text_color}}",
                      "background": "{{awtrix_background_color}}",
                      "rainbow": {{awtrix_rainbow}},
                      "icon": "{{awtrix_icon}}",
                      "pushIcon": {{awtrix_push_icon}},
                      "repeat":  {{awtrix_repeat}},
                      "duration": {{awtrix_duration}},
                      "pos": {{awtrix_pos}}
                    }
          - conditions:
            - condition: template
              value_template: '{{ awtrix_appname != "" }}'
            sequence:
              - service: mqtt.publish
                data:
                  qos: 0
                  retain: "{{awtrix_retain}}"
                  topic: "{{ repeat.item }}/custom/{{ appname }}"
                  payload: >
                    {
                      "text": "{{awtrix_text}}",
                      "textCase": {{awtrix_text_case}},
                      "textOffset": {{awtrix_text_offset}},
                      "color": "{{awtrix_text_color}}",
                      "background": "{{awtrix_background_color}}",
                      "rainbow": {{awtrix_rainbow}},
                      "icon": "{{awtrix_icon}}",
                      "pushIcon": {{awtrix_push_icon}},
                      "repeat":  {{awtrix_repeat}},
                      "duration": {{awtrix_duration}},
                      "pos": {{awtrix_pos}}
                    }
mode: restart
